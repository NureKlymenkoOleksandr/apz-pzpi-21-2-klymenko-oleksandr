1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Створена система складається з 5 головних компонентів, що взаїмодіятимуть між собою: серверна частина, розгорнута у хмарному середовищі база даних, браузерний та мобільний застосунки та IoT пристрій.
Увесь функціонал системи вимагає користувача пройти процедуру автентифікації. Також у системі наявні дві ролі: адміністратор, що має доступ до браузерної частини, через яку виконується адміністрування системи, та звичайний користувач, що може користуватися головним функціоналом через IoT пристрій та мобільний клієнт. 
Клієнт має мати доступ до мобільного застосунку, у якому він зможе побачити історію його тренувань, отримувати звіт у вигляді списку вимірів протягом його тренування та мати можливість отримати поради згідно з поданими вимірами.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Ефективність та безперебійна робота будь-якої комплексної системи, незалежно від її масштабу та призначення, значною мірою залежить від ретельного планування та професійного виконання початкового етапу її впровадження - розгортання. Це критично важливий процес, правильне виконання якого забезпечує оптимальну продуктивність системи, мінімізує ризики виникнення помилок та збоїв, а також створює міцну основу для її подальшого розвитку та масштабування.
З огляду на вищевикладене, було прийнято розгорнути серверну частину та базу даних у хмарному середовищі для забезпечення безпеки даних та безперебійної роботи ключових частин системи. 
Браузерний застосунок являє собою зібрані та оптимізовані HTML, CSS, JavaScript файли, а також інші статичні файли, що за запитом до веб-серверу повертаються браузерові, який обробляє їх та відмальовує інтерфейс. 
Мобільна частина є нативним застосунком, що встановлюється на мобільний пристрій користувача та спілкується із серверною частиною за допомогою асинхронних HTTPS запитів, забезпечуючи безпеку та не блокуючи взаємодію з інтерфейсом. 
IoT-пристрій спілкуватиметься із серверною частиною за допомогою HTTPS запитів, регулярно надсилаючи до неї актуальні дані.
На основі поданого була складена діаграма розгортання (рис. А.1).

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

При проєктуванні для розробці серверної частини було прийнято рішення керуватися принципами N-рівневої архітектури. Таким чином забезпечується чіткий поділ відповідальності та покращує його загальну структуру.  Згідно з принципами N-рівневої архітектури було виявлено 3 головні рівні: рівень представлення, рівень бізнес логіки та рівень доступу до даних.
Рівень представлення відповідає за отримання зовнішніх запитів до серверу, витягання даних з них та їх передачу до рівню бізнес-логікіи на подальшу обробку, а також повертає результат назад користувачеві. У даному випадку цей рівень представлений у вигляді класів-контролерів, що містять методи, кожному з яких відповідає певний шлях. Дані методи є вхідними точками у серверну частину.
Рівень бізнес-логіки містить безпосередньо головну логіку системи, маніпулює  даними, отриманими з клієнтської частини та бази даних, проводить їх валідацію та повертає дані, що мають бути відправлені користувачеві.
Рівень доступу до даних представлений класами-репотизоріями, що здатні робити запити до бази даних, отримуючі інформацію про певні сутності, агрегувати дані тощо. Дані класи надаються бібліотекою TypeORM, що підтримує велику кількість СУБД, однією з яких є PostgreSQL.
Створенням об’єктів усіх з наведених класів на усіх рівнях керує вбудована у NestJS реалізація патерну Dependency Injection.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Проведемо концетуальне моделювання системи, враховуючи що у ній наявні два основні типи користувачів: звичайний користувач (клієнти мережі спортивних залів) та адміністратор.
Клієнтам буде доступне створення власного облікового запису, можливість починати тренування у певній залі, перегляд минулих тренувань та генерація порад згідно з показниками, що були отримані протягом тренування. Для початку тренування кожен користувач зможе використовувати свій IoT-пристрій, який після початку тренування зніматиме показники його тіла, на основі яких після тренування можна отримати рекомендації. Також користувачі можуть ставити собі цілі, обираючи з наявного списку їх типів, прогрес досягнення яких вони можуть занотовувати кожне тренування та потім відстежувати.
Адміністратори мережі спортивних залів, окрім можливостей, що наявні у звичайних користувачів, можуть використовувати власні облікові записи для входу у браузерний застосунок, через який виконується адміністрування системи. У ній вони можуть додавати нові спортивні зали, змінювати дані про вже існуючі, створювати нові облікові записи та надавати при цьому їм права адміністратора. Також можуть додавати нові типи цілей, що доступі користувачам.
На основі викладеного створено діаграму прецедентів (рис. А.2).

5 ПОБУДОВА ER-ДІАГРАМИ

З огляду на проведене концептуальне моделювання системи, можемо виділити наступні сутності, дані про яких будуть зберігатися:
	Сутнність «Ціль» – містить інформацію про цілі, які створили для себе користувачі;
	Сутнність «Прогрес цілі» – містить інформацію про певний прогрес цілі, який користувачі можуть додавати у застосунку щоденно.
	Сутнність «Спортивна зала» – містить інформацію про існуючі спортивні зали;
	Сутнність «Вимір» – містить інформацію про виміри, що було зроблені протягом певного тренування користувача. Створюються IoT-пристроєм;
	Сутнність «Тренування» – містить інформацію про тренування, почате та закінчене користувачем.
	Сутнність «Користувач» – містить дані про користувача такі як ім’я, прізвище, дата народження тощо.
На основі поданої інформації про сутності була створення ER-діаграма (рис. А.3).

6 СПЕЦИФІКАЦІЯ REST

Наведемо для створеної програмної системи специфікацію REST.
Автентифікація:
	POST auth/sign-up – реєстрація нового облікового запису користувачем.
Облікові записи
	GET users/:id – отримання інформації про обліковий запис користувача за індентифікатором;
	PATCH users/:id – зміна інформації про обліковий запис користувача за індентифікатором;
	DELETE users/:id – видалення облікового запису користувача за індентифікатором.
	POST users/ – створення нового користувача, відрізняється від реєстрації можливісту надати користувачеві доступ до функціоналу адміністратора.
Спортивні зали
	POST gyms/ – створення нової спортивної зали;
	GET gyms/ – отримання списку усіх наявних у системи спортивних зал;
	GET gyms/:id – отримання інформації про спортивну залу за ідентифікатором;
	PATCH gyms/:id – зміна інформації про спортивну залу за ідентифікатором;
	DELETE gyms/:id – видалення спортивної зали за ідентифікатором.
Тренування:
	POST trainings/start – початок нового тренування;
	POST trainings/end – закінчення поточного активного тренування. Повертає помилку, якщо у цей момент немає жодного активного тренування;
	GET trainings/active – повертає поточне активне тренування або нічого, якщо такого немає;
	GET trainings/ – отримання усіх тренуваннь, включно із активним;
	GET trainings/:id – отримання тренування по ідентифікатору;
	DELETE trainings/:id – видалення минулого тренування по ідентифікатору;
	POST trainings/:id/generate-recommendations – генерація рекомендацій до тренування, яке вже закінчили, з огляду на вимірювання, що були зняті під час цього тренування;
	POST trainings/measure – створення нового вимірювання для активного тренування;
	GET trainings/:trainingId/measurements – отримання усіх вимірювань для тренування за його ідентифікатором;
	GET trainings/:trainingId/averages – отримання середніх вимірів температури та серцебиття протягом тренування.
Цілі
	POST goals/ – створення нової цілі;
	GET goals/ – отримання усіх цілей користувача;
	GET goals/:id – отримання певної цілі за її ідентифікатором;
	PATCH goals/:id – редагування певної цілі користувача за її ідентифікатором.
	DELETE goals/:id – видалення певної цілі користувача за її ідентифікатором.
	POST goals/:goalId/progress– додавання прогресу до певної цілі за її ідентифікатором;
	PATCH goals/:goalId/progress/:id – зміна прогресу до певної цілі за ідентифікаторами цілі та прогресу;
	DELETE goals/:goalId/progress/:id – видалення прогресу до певної цілі за ідентифікаторами цілі та прогресу

7 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ

Спираючись на створену архітектуру серверної частини була визначена структура пакетів. Головним пакетом застосунку, що створюється за допомогою NestJS є пакет app, що об’єднує усі інші пакети застосунку, імпортуючи їх у себе. Також тут обов’язково відбувається конфігурація ORM та інших динамічних модулів. Даний пакет використовується файлом main.ts для створення застосунку та початку його роботи. На кореневому рівні пакети можуть містити файли контролеру, сервісу та модулю, власне який є серцем пакету та керує його залежностями.
Також пакети можуть включати наступні підпакети:
	entities – містить сутності, якими оперує даний пакет;
	dto – містить DTO (Data Transfer Objects), які визначають тіла запитів для контролеру у цьому пакеті;
	decorators – містить декоратори, що дозволяє надавати класам доступ до певних залежностей, а також надавати їм та їх методам додатковий зовнішній функціонал;
	guards – містить так звані Guards, що є спеціальними класами
Серед інших пакетів наявні:
	Пакети для взаємодії з сутностями. На кожну окрему сутність було відведено окремий пакет. Сутність, домен якої тісно пов’язаний з іншою, головною сутністю, може бути частиною пакету цією сутності або ж мати вкладений пакет. Пакети сутнотей: goal, gym, measurement, training, user.
	Пакет для взаємодії з автентифікацією auth – містить ендпоінт для реєстрації, а також декоратори та guards, що дозволяють захищати контролери та їх окремі методи від неавтентифікованих запитів, отримати дані про акаунт користувача та позначати методи як публічні у захищеному контролері;
	Пакет для конфігурації config – містить сервіс, що конфігує доступ до змінних оточення, а також містить заготовлену конфігурацію підключення до бази даних;
	Пакет firebase – містить динамічний модуль, що дозволяє ініціалізувати firebase у проєкті, за допомогою сервісного файлу та отримати доступ до послуг автентифікації. Також містить декоратор для впровадження об’єкту firebase застосунку іншим класам;
	Пакет ai – містить сервіс для взаємодії із API Gemini від Google. Використовується для створення рекомендацій за допомогою штучного інтелекту.
Структура пакетів відображена на діаграмі пакетів (рис. А.4).

ВИСНОВКИ

Протягом виконання лабораторної системи було створено серверну частину для програмної системи для моніторингу стану та персоналізації досвіду клієнтів спортивного залу. Наведено опис прийнятих інженерних рішень, представлено її загальну архітектуру, показано будову серверних компонентів та структури бази даних.




