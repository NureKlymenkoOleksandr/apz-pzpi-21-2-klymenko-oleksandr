1 КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ СИСТЕМИ

Перед початком розробки клієнтської частини створюваної програмної системи необхідно провести концептуальне моделювання продукту.
До створеного застосунку має мати доступ лише адміністратор, оскільки через нього буде виконуватися адміністрування системи. Адміністратору має буде доступна можливість додавати нові спортивні зали та видаляти, редагувати вже існуючі, додавати нові статті та редагувати, видаляти вже існуючі, додавати нових адміністраторів, а також віддалено запускати створення резервних копій бази даних. 
З огляду на вищезазначене була розроблена UML діаграма прецедентів (рис. А.1).

ОПИС РОЗРОБКИ ЗАСТОСУНКУ ДЛЯ ВБУДОВАНИХ СИСТЕМ
2.1.	Обґрунтування архітектурних рішень проєкту

З огляду на використані технології та міркувань щодо підтримуваності, швидкодії застосунку, було прийнято рішення використовувати компонентно-орієнтовану архітектуру.
Таким чином вся частина система була розділена на окремі незалежні компоненти, що можуть комунікувати між собою тільки через заздалегідь визначені властивості. Завдяки цьому була покращена якість коду, а самі частини стали менш зв'язаними, завдяки чому також була покращена їх тестованість.
Конфігурація посилань на серверну частину та інші чутливі дані зберігаються у спеціальному файлі оточення.
Обмін даними із серверною частиною виконується через HTTPS запити по заздалегідь визначеним шляхам. Таким чином клієнтська частина виконує асинхронні запити, не блокуючи інтерфейс протягом завантаження даних. Сервер та клієнт обмінюються даними у форматі JSON.
Застосунок підтримує англійську та українську локалізації. Список мов може бути легко розширений, додавши відповідний файл з перекладами для застосунку.
Автентифікація була реалізована за допомогою сервісу Firebase Authentication, а сервер у свою чергу перевіряє при цьому виданий токен на автентичність при виконанні запитів до нього.
Для демонстрацїі структури створеної системи, з огляду на її аріхектуру, була створена UML діаграма компонентів (рис. А.2).

2.2.	Опис використаних технологій

Для розробки була використана мова TypeScript та бібліотека React. Завдяки цьому була забезпечена швидкодія додатку, покращена якість розробки, а безпека типів забезпечує кращу передбачуваність системи та її стійкість до недійсних даних. Також була використана бібліотека Mantine, як основа дизайн-системи застосунку. Компоненти, з яких складається системи побудовані на базі компонентів, що надає дана бібліотека.
Для автентифікації було використано Firebase JavaScript SDK.
Для локалізації використано i18next, а також react-i18next, що є розширенням для першої бібліотеки, для більш зручного використання разом з бібліотекою React.
Для демонстрації використаних пакетів була створена UML діаграма пакетів (рис. А.3).

2.3.	Опис результатів розробки частини проекту для вбудованих систем

Результатом розробки програмного забезпечення для браузерної клієнтської частини системи став застосунок, що дозволяє адміністрування системи для моніторингу стану та персоналізації досвіду клієнтів мережів спортивних зал.
При вході у застосунок користувачеві буде запропоновано увійти в існуючий обліковий запис. Опція реєстрації відсутня, оскільки дана частина доступна лише адміністраторам і відповідні облікові записи можуть створювати лише інші адміністратори.
У верхній частині сторінки доступне меню для вибору мови.
Користувачеві доступні 4 розділи: «Спортивні зали», «Статті», «Адміністратори» та «Резервні копії».
У розділі «Спортивні зали» адміністратор має змогу керувати наявними у системі спортивними залами, що включає їх переглядання, видалення та редагування вже існуючих, а також створення нових. Створення нової спортивної зали відбувається на окремій сторінці, на котру можна перейти за допомогою кнопки «Додати».
У розділі «Статті» адміністратор має змогу керувати наявними у системі статтями, що включає їх переглядання, видалення та редагування вже існуючих, а також створення нових. Створення нової статті відбувається на окремій сторінці, на котру можна перейти за допомогою кнопки «Додати». У формі додавання статті можливо додати їй заголовок, основний контент у вигляді Markdown, теги по яким подану статтю можна буде знайти, а також картинку для обкладинки.
У розділі «Адмінстратор» знаходиться інтерфейс для створення нових облікових записів адміністраторів. Можливо переглядати вже існуючі, а також додавати нові за допомогою кнопки «Додати».
У розділі «Резервні копії» знаходиться інтерфейс для керування резервними копіями бази даних. Створення резервних копій відбувається за допомогою окремого сервісу на сервері, що працює на Express. У цьому розділі доступний зручний перегляд вже існуючих копій по датам, а також кнопка для відправки запиту на нову резервну копію, після чого нова копія буде додана у список.
Детальніше принцип роботи браузерного клієнта наведено в UML діаграмі діяльності (рис. А.4).

2.4.	Опис результатів тестування частини проекту для вбудованих систем

Після закінчення розробки системи було проведено її функціональне тестування з використанням браузера Google Chrome та операційної системи Windows 10.
Протягом тестування була перевірена стабільність роботи застосунку, коректність виводу інформації та його комунікації із сервером.

ВИСНОВКИ

Протягом виконання лабораторної розробки було розроблено браузерний клієнтський застосунок для програмної системи для моніторингу стану клієнтів та персоналізації досвіду клієнтів мережі спортивних зал. Було описано прийняті інженені рішення, побудовано діаграми, представлено будову системи та її взаємодію з іншими частинами системи.